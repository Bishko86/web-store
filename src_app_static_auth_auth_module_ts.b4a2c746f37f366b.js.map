{"version":3,"file":"src_app_static_auth_auth_module_ts.b4a2c746f37f366b.js","mappings":"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","sources":["./src/app/core/helpers/error-message.helper.ts","./src/app/static/auth/auth.component.ts","./src/app/static/auth/auth.component.html","./src/app/static/auth/auth.module.ts","./src/app/static/auth/components/sign-in/sign-in.component.ts","./src/app/static/auth/components/sign-in/sign-in.component.html","./src/app/static/auth/components/sign-up/sign-up.component.ts","./src/app/static/auth/components/sign-up/sign-up.component.html"],"sourcesContent":["import { AbstractControl } from \"@angular/forms\";\n\nexport const getErrorMessage = (control: AbstractControl) => {\n    if (control.hasError('required')) {\n        return 'You must enter a value';\n    }\n    return control.hasError('email') ? 'Not a valid email' : '';\n}\n","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n} from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport { filter, Subject, takeUntil } from 'rxjs';\nimport { DestroyableDirective } from 'src/app/core/directives/destroyable.directive';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AuthComponent\n  extends DestroyableDirective\n  implements OnInit, OnDestroy\n{\n  public isAuthPage = true;\n\n  constructor(private router: Router, private cdr: ChangeDetectorRef) {\n    super();\n  }\n\n  public ngOnInit(): void {\n    this.routeListener();\n  }\n\n  private routeListener(): void {\n    this.router.events\n      .pipe(\n        takeUntil(this.destroy$),\n        filter((e): e is NavigationEnd => e instanceof NavigationStart)\n      )\n      .subscribe((event) => {\n        this.isAuthPage = event.url === '/auth';\n        this.cdr.markForCheck();\n      });\n    this.isAuthPage = this.router.url === '/auth';\n  }\n}\n","<div class=\"auth\">\n  <ng-container *ngIf=\"isAuthPage\">\n    <h1>Auth</h1>\n    <p class=\"text\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus rerum saepe\n      eveniet quidem maiores sequi minus illo ipsum in, debitis eum rem\n      doloribus repellendus officia commodi optio nihil accusamus est repellat\n      architecto alias.\n    </p>\n    <div class=\"to-sign\">\n      <a mat-raised-button routerLink=\"/auth/sign-in\">Sign in</a>\n      <a mat-raised-button routerLink=\"/auth/sign-up\">Sign up</a>\n    </div>\n  </ng-container>\n  <router-outlet></router-outlet>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthComponent } from './auth.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { SignInComponent } from './components/sign-in/sign-in.component';\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      { path: 'sign-in', component: SignInComponent },\n      { path: 'sign-up', component: SignUpComponent },\n    ],\n  },\n  { path: '**', redirectTo: '/auth' },\n];\n\n@NgModule({\n  declarations: [AuthComponent, SignInComponent, SignUpComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    FormsModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ],\n})\nexport class AuthModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { State } from 'src/app/core/decorators/ngrx-selector.decorator';\nimport { getErrorMessage } from 'src/app/core/helpers/error-message.helper';\nimport { login } from 'src/app/core/store/actions/auth.actions';\nimport { selectAuthIsLoading } from 'src/app/core/store/selectors/auth.selector';\nimport { AppState } from 'src/app/core/store/state/app.state';\nimport { SignInFormModel } from '../../models/sign-in.model';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignInComponent implements OnInit {\n  public signInForm: FormGroup<SignInFormModel>;\n  public hide = true;\n\n  public readonly getErrorMessage = getErrorMessage;\n  @State(selectAuthIsLoading) public readonly isLoading$: Observable<boolean>;\n  \n\n  constructor(private readonly store: Store<AppState>) { }\n\n  public ngOnInit(): void {\n    this.initForm();\n  }\n\n  public get email(): AbstractControl<string> {\n    return this.signInForm.controls['email'];\n  }\n\n  public get password(): AbstractControl<string> {\n    return this.signInForm.controls['password'];\n  }\n\n  private initForm(): void {\n    this.signInForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]) as AbstractControl,\n      password: new FormControl('', Validators.required) as AbstractControl,\n    });\n  }\n\n  public submit(): void {\n    const { email, password } = this.signInForm.getRawValue();\n    this.store.dispatch(login({ email, password }));\n  }\n}\n","<div class=\"sign-form\">\n  <div class=\"container\">\n    <h1>Sign In</h1>\n    <form [formGroup]=\"signInForm\" (submit)=\"submit()\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Enter your email</mat-label>\n        <input\n          matInput\n          placeholder=\"pat@example.com\"\n          formControlName=\"email\"\n          required\n        />\n        <mat-error *ngIf=\"email.invalid\">{{\n          getErrorMessage(email)\n        }}</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Enter your password</mat-label>\n        <input\n          matInput\n          [type]=\"hide ? 'password' : 'text'\"\n          formControlName=\"password\"\n        />\n        <button\n          mat-icon-button\n          matSuffix\n          (click)=\"hide = !hide\"\n          [attr.aria-label]=\"'Hide password'\"\n          [attr.aria-pressed]=\"hide\"\n          (click)=\"$event.preventDefault()\"\n        >\n          <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n        </button>\n      </mat-form-field>\n      <button type=\"submit\" class=\"submit\" mat-button [disabled]=\"signInForm.invalid || (isLoading$ | async)\">Sign in</button>\n    </form>\n  </div>\n</div>\n","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { Observable, takeUntil } from 'rxjs';\nimport { State } from 'src/app/core/decorators/ngrx-selector.decorator';\nimport { DestroyableDirective } from 'src/app/core/directives/destroyable.directive';\nimport { getErrorMessage } from 'src/app/core/helpers/error-message.helper';\nimport { User } from 'src/app/core/models';\nimport { SnackBarService } from 'src/app/core/services/snackbar.service';\nimport { UserService } from 'src/app/core/services/user.service';\nimport {\n  registrate,\n  AuthActions,\n} from 'src/app/core/store/actions/auth.actions';\nimport { selectAuthIsLoading } from 'src/app/core/store/selectors/auth.selector';\nimport { AppState } from 'src/app/core/store/state/app.state';\nimport { SignUpFormModel } from '../../models/sign-up.model';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['../sign-in/sign-in.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SignUpComponent extends DestroyableDirective implements OnInit, OnDestroy {\n  public signUpForm: FormGroup<SignUpFormModel>;\n  public hidePass1 = true;\n  public hidePass2 = true;\n\n  public readonly getErrorMessage = getErrorMessage;\n  @State(selectAuthIsLoading) public readonly isLoading$: Observable<boolean>;\n\n  constructor(\n    private readonly store: Store<AppState>,\n    private readonly updates$: Actions,\n    private readonly userService: UserService,\n    private readonly snackBar: SnackBarService,\n  ) {\n    super();\n  }\n\n  public ngOnInit(): void {\n    this.initForm();\n    this.saveUser();\n  }\n\n  public get username(): AbstractControl {\n    return this.signUpForm.controls['username'];\n  }\n\n  public get email(): AbstractControl {\n    return this.signUpForm.controls['email'];\n  }\n\n\n  public get confirmPassword(): AbstractControl {\n    return this.signUpForm.controls['confirmPassword'];\n  }\n\n  private initForm(): void {\n    this.signUpForm = new FormGroup({\n      username: new FormControl('', Validators.required) as AbstractControl,\n      email: new FormControl('', [Validators.required, Validators.email]) as AbstractControl,\n      password: new FormControl('', Validators.required) as AbstractControl,\n      confirmPassword: new FormControl('', Validators.required) as AbstractControl,\n    });\n  }\n\n  public submit(): void {\n    const { username, email, password, confirmPassword } = this.signUpForm.getRawValue();\n    if(password === confirmPassword) {\n      this.store.dispatch(registrate({ username, email, password }));\n    } else {\n      this.signUpForm.controls['confirmPassword'].setErrors({ incorrect: true });\n    }\n  }\n\n  private saveUser(): void {\n    this.updates$\n      .pipe(ofType(AuthActions.REGISTRATION_SUCCESS), takeUntil(this.destroy$))\n      .subscribe({\n        next: (action: { user: User; type: string }) => {\n          this.userService.createUser(action.user);\n        },\n        error: () => {\n          this.snackBar.openSnackBar('Something went wrong', 'Error');\n        },\n      });\n  }\n}\n","<div class=\"sign-form\">\n  <div class=\"container\">\n    <h1>Sign Up</h1>\n    <form [formGroup]=\"signUpForm\" (submit)=\"submit()\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Enter your name</mat-label>\n        <input\n          matInput\n          placeholder=\"username\"\n          formControlName=\"username\"\n          required\n        />\n        <mat-error *ngIf=\"username.invalid\">{{\n          'You must enter username'\n        }}</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Enter your email</mat-label>\n        <input\n          matInput\n          placeholder=\"pat@example.com\"\n          formControlName=\"email\"\n          required\n        />\n        <mat-error *ngIf=\"email.invalid\">{{\n          getErrorMessage(email)\n        }}</mat-error>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Enter your password</mat-label>\n        <input\n          matInput\n          [type]=\"hidePass1 ? 'password' : 'text'\"\n          formControlName=\"password\"\n        />\n        <button\n          mat-icon-button\n          matSuffix\n          (click)=\"hidePass1 = !hidePass1\"\n          [attr.aria-label]=\"'Hide password'\"\n          [attr.aria-pressed]=\"hidePass1\"\n          (click)=\"$event.preventDefault()\"\n        >\n          <mat-icon (click)=\"$event.preventDefault()\">{{ hidePass1 ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Confirm your password</mat-label>\n        <input\n          matInput\n          [type]=\"hidePass2 ? 'password' : 'text'\"\n          formControlName=\"confirmPassword\"\n        />\n        <button\n          mat-icon-button\n          matSuffix\n          (click)=\"hidePass2 = !hidePass2\"\n          [attr.aria-label]=\"'Hide password'\"\n          [attr.aria-pressed]=\"hidePass2\"\n          (click)=\"$event.preventDefault()\"\n        >\n          <mat-icon>{{ hidePass2 ? \"visibility_off\" : \"visibility\" }}</mat-icon>\n        </button>\n        <mat-error *ngIf=\"confirmPassword.invalid\">{{\n          'wrong password'\n        }}</mat-error>\n      </mat-form-field>\n      <button type=\"submit\" class=\"submit\" mat-button [disabled]=\"signUpForm.invalid || (isLoading$ | async)\">Sign up</button>\n    </form>\n  </div>\n</div>\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}
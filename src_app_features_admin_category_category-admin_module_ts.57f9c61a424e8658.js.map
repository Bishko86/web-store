{"version":3,"file":"src_app_features_admin_category_category-admin_module_ts.57f9c61a424e8658.js","mappings":"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","sources":["./src/app/features/admin/category/category-admin.component.ts","./src/app/features/admin/category/category-admin.component.html","./src/app/features/admin/category/category-admin.module.ts","./src/app/features/admin/category/components/add-category-form/add-category-form.component.ts","./src/app/features/admin/category/components/add-category-form/add-category-form.component.html","./src/app/features/admin/category/components/update-category/update-category.component.ts","./src/app/features/admin/category/components/update-category/update-category.component.html"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Actions, ofType } from '@ngrx/effects';\nimport {  Store } from '@ngrx/store';\nimport { Observable, filter, take, takeUntil } from 'rxjs';\n\nimport { State } from 'src/app/core/decorators/ngrx-selector.decorator';\nimport { DestroyableDirective } from 'src/app/core/directives/destroyable.directive';\nimport { Category } from 'src/app/core/models';\nimport { MoreOptions } from 'src/app/core/models/more-options.model';\nimport { ConfirmService } from 'src/app/core/services/confirm.service';\nimport {\n  removeCategory,\n  updateCategory,\n  updateCategorySuccess,\n} from 'src/app/core/store/actions/category.actions';\nimport {\n  selectCategories,\n} from 'src/app/core/store/selectors/category.selectors';\nimport { AppState } from 'src/app/core/store/state/app.state';\nimport { DELETE_RECORD_TEXT } from 'src/app/shared/constants/messages';\nimport { AddCategoryFormComponent } from './components/add-category-form/add-category-form.component';\nimport { CategoryOptions } from '../constants/more-options.constant';\n\n@Component({\n  selector: 'app-category-admin',\n  templateUrl: './category-admin.component.html',\n  styleUrls: ['./category-admin.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryAdminComponent extends DestroyableDirective implements OnInit, OnDestroy {\n  @State(selectCategories) public readonly categories$: Observable<Category[]>;\n  public editedCategoryId: string | undefined;\n  public editMode = false;\n\n  public displayedColumns: string[] = [\n    'categoryName',\n    'createdAt',\n    'categoryId',\n    'options',\n  ];\n\n  public moreOptions: MoreOptions[] = CategoryOptions;\n\n  constructor(\n    private readonly store: Store<AppState>,\n    private readonly actions: Actions,\n    private readonly dialog: MatDialog,\n    private readonly confirmService: ConfirmService\n  ) { super() }\n\n  public ngOnInit(): void {\n    this.isCategoryUpdated();\n  }\n\n  private isCategoryUpdated() {\n    this.actions\n      .pipe(ofType(updateCategorySuccess), takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.toViewMode();\n      });\n  }\n\n  public toViewMode(): void {\n    this.editMode = false;\n    this.editedCategoryId = undefined;\n  }\n\n  public editCategory(category: Category): void {\n    this.editedCategoryId = category.id;\n    this.editMode = true;\n  }\n\n  public updateCategory(event: string): void {\n    if (this.editedCategoryId) {\n      this.store.dispatch(\n        updateCategory({\n          categoryName: event,\n          categoryId: this.editedCategoryId,\n        })\n      );\n    }\n  }\n\n  public removeCategory(category: Category): void {\n    this.confirmService.confirm(DELETE_RECORD_TEXT).pipe(\n      filter(Boolean),\n      take(1)\n    ).subscribe(() => {\n      this.store.dispatch(removeCategory({ categoryId: category.id! }));\n    });\n  }\n\n  public openCategoryForm() {\n    this.dialog.open(AddCategoryFormComponent, {\n      height: '300px',\n      width: '400px',\n    });\n  }\n}\n","<div class=\"content-wrapper\">\n  <div class=\"add-category\">\n    <button mat-button class=\"add-category-btn\" (click)=\"openCategoryForm()\">Add Category</button>\n  </div>\n  <ng-container *ngIf=\"categories$ | async as categories\">\n    <div class=\"table-wrap\" *ngIf=\"categories.length > 0; else noCategories\">\n      <table\n        mat-table\n        [dataSource]=\"categories\"\n        aria-describedby=\"category-table\"\n      >\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"categoryName\">\n          <th mat-header-cell *matHeaderCellDef>Category Name</th>\n          <td mat-cell *matCellDef=\"let category\">\n            <span *ngIf=\"category.id !== editedCategoryId\"\n              >{{category.name}}</span\n            >\n            <app-update-category\n              *ngIf=\"editMode && category.id === editedCategoryId\"\n              [categoryName]=\"category.name\"\n              (toViewMode)=\"toViewMode()\"\n              (update)=\"updateCategory($event)\"\n            ></app-update-category>\n          </td>\n        </ng-container>\n\n        <!-- Created at Column -->\n        <ng-container matColumnDef=\"createdAt\">\n          <th mat-header-cell *matHeaderCellDef>Created at</th>\n          <td mat-cell *matCellDef=\"let category\">\n            {{category.createdAt | date}}\n          </td>\n        </ng-container>\n\n        <!-- Category Id Column -->\n        <ng-container matColumnDef=\"categoryId\">\n          <th mat-header-cell *matHeaderCellDef>Category id</th>\n          <td mat-cell *matCellDef=\"let category\">{{category.id}}</td>\n        </ng-container>\n\n        <!-- More Option Column -->\n        <ng-container matColumnDef=\"options\">\n          <th mat-header-cell *matHeaderCellDef class=\"more-options\">\n            More options\n          </th>\n          <td mat-cell *matCellDef=\"let category\" class=\"more-options\">\n            <app-more-options\n              [moreOptions]=\"moreOptions\"\n              (update)=\"editCategory(category)\"\n              (delete)=\"removeCategory(category)\"\n            ></app-more-options>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr\n          mat-row\n          *matRowDef=\"let row; columns: displayedColumns;\"\n          class=\"element-row\"\n        ></tr>\n      </table>\n    </div>\n  </ng-container>\n  <ng-template #noCategories>\n    <p>Category list is empty</p>\n  </ng-template>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AddCategoryFormComponent } from './components/add-category-form/add-category-form.component';\nimport { CategoryAdminComponent } from './category-admin.component';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UpdateCategoryComponent } from './components/update-category/update-category.component';\n\n\n@NgModule({\n  declarations: [\n    CategoryAdminComponent,\n    AddCategoryFormComponent,\n    UpdateCategoryComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forChild([{path: '', component: CategoryAdminComponent}])\n  ]\n})\nexport class CategoryAdminModule { }\n","import { Component, OnInit, ChangeDetectionStrategy, OnDestroy } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { Actions, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { State } from 'src/app/core/decorators/ngrx-selector.decorator';\nimport { DestroyableDirective } from 'src/app/core/directives/destroyable.directive';\nimport { addCategory, addCategorySuccess } from 'src/app/core/store/actions/category.actions';\nimport { selectCategoryIsLoading } from 'src/app/core/store/selectors/category.selectors';\nimport { AppState } from 'src/app/core/store/state/app.state';\nimport { CategoryFormModel } from '../../models/category-form.model';\n\n@Component({\n  selector: 'app-add-category-form',\n  templateUrl: './add-category-form.component.html',\n  styleUrls: ['./add-category-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddCategoryFormComponent extends DestroyableDirective implements OnInit, OnDestroy {\n  @State(selectCategoryIsLoading) public readonly isLoading$: Observable<boolean>;\n  public categoryForm: FormGroup<CategoryFormModel>;\n\n  constructor(\n    private readonly store: Store<AppState>,\n    private readonly actions: Actions,\n    private readonly dialogRef: MatDialogRef<AddCategoryFormComponent>,\n  ) { super() }\n\n  public ngOnInit(): void {\n    this.initCategoryForm();\n  }\n\n  private initCategoryForm(): void {\n    this.categoryForm = new FormGroup({\n      categoryName: new FormControl('', Validators.required) as AbstractControl,\n    });\n  }\n\n  public addCategory(): void {\n    const { categoryName } = this.categoryForm.getRawValue();\n    this.store.dispatch(addCategory({ name: categoryName }));\n    this.actions\n      .pipe(ofType(addCategorySuccess), takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.categoryForm.reset();\n        this.closeDialog();\n      });\n  }\n\n  public closeDialog(): void {\n    this.dialogRef.close();\n  }\n}\n","<div class=\"dialog\">\n  <span class=\"close-dialog\" (click)=\"closeDialog()\">&#10006;</span>\n\n  <h2 mat-dialog-title class=\"dialog-title\">Category form</h2>\n\n  <form [formGroup]=\"categoryForm\" (submit)=\"addCategory()\">\n    <div mat-dialog-content class=\"dialog-content\">\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Enter category name</mat-label>\n        <input\n          matInput\n          placeholder=\"Enter category name\"\n          formControlName=\"categoryName\"\n          required\n        />\n      </mat-form-field>\n    </div>\n    <button\n      type=\"submit\"\n      class=\"submit dialog-actions\"\n      mat-button\n      [disabled]=\"categoryForm.invalid || (isLoading$ | async)\"\n    >\n      Add category\n    </button>\n  </form>\n</div>\n","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { filter, fromEvent, skip, Subject, take } from 'rxjs';\n\n@Component({\n  selector: 'app-update-category',\n  templateUrl: './update-category.component.html',\n  styleUrls: ['./update-category.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpdateCategoryComponent implements OnInit, OnDestroy {\n  private destroy$: Subject<void> = new Subject<void>();\n  private get element() {\n    return this.host.nativeElement;\n  }\n\n  public editMode$ = new Subject<boolean>();\n\n  @Input() public categoryName: string;\n  @Output() private toViewMode = new EventEmitter<boolean>();\n  @Output() private update = new EventEmitter<string>();\n\n  constructor(private host: ElementRef) {}\n\n  ngOnInit(): void {\n    this.editModeHandler();\n  }\n\n  private editModeHandler(): void {\n    fromEvent(document, 'click')\n      .pipe(\n        skip(1),\n        filter(({ target }) => !this.element.contains(target)),\n        take(1)\n      ).subscribe(() => this.viewMode());\n  }\n\n  viewMode(): void {\n    this.toViewMode.emit(true);\n  }\n\n  updateCategory(): void {\n    const inputValue = this.categoryName.trim();\n    if (inputValue) {\n      this.update.emit(inputValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"editable-input\">\n  <input type=\"text\" [(ngModel)]=\"categoryName\"/>\n  <span class=\"btn-icon\" (click)=\"updateCategory()\">&#10003;</span>\n  <span class=\"btn-icon\" (click)=\"viewMode()\">&#10007;</span>\n</div>\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}